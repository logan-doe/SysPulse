class SysPulseMonitor {
    constructor() {
        this.version = '1.0.0';
        this.ws = null;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 5;
        this.isConnected = false;
        this.init();
    }

    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SysPulse Monitor...');
        console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        await this.loadVersion();
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
        this.connectWebSocket();
        
        this.updateStatus('connecting', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
    }

    connectWebSocket() {
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsUrl = `${protocol}//${window.location.host}/ws`;

        console.log(`üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫: ${wsUrl}`);

        
        this.ws = new WebSocket(wsUrl);
        
        this.ws.onopen = () => {
            console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
            this.isConnected = true;
            this.reconnectAttempts = 0;
            this.updateStatus('connected', '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ (WebSocket)');
        };
        
        this.ws.onmessage = (event) => {
            try {
                const metrics = JSON.parse(event.data);
                this.updateMetricsDisplay(metrics);
                this.updateLastUpdateTime();
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ—Ç—Ä–∏–∫:', error);
            }
        };
        
        this.ws.onclose = (event) => {
            console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:', event.code, event.reason);
            this.isConnected = false;
            this.updateStatus('disconnected', '–û—Ç–∫–ª—é—á–µ–Ω–æ');
            this.handleReconnection();
        };
        
        this.ws.onerror = (error) => {
            console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
            this.updateStatus('error', '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        };
    }

    handleReconnection() {
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
            this.reconnectAttempts++;
            const delay = Math.min(1000 * this.reconnectAttempts, 10000);
            
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts} —á–µ—Ä–µ–∑ ${delay}–º—Å`);
            this.updateStatus('reconnecting', `–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);
            
            setTimeout(() => {
                this.connectWebSocket();
            }, delay);
        } else {
            console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            this.updateStatus('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è');
        }
    }

    async loadVersion() {
        try {
            const response = await fetch('/api/version');
            const data = await response.json();
            document.getElementById('version').textContent = data.version;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ—Ä—Å–∏–∏:', error);
        }
    }

    updateMetricsDisplay(metrics) {
        // –û–±–Ω–æ–≤–ª—è–µ–º CPU
        document.getElementById('cpu-usage').textContent = `${metrics.cpu.usage.toFixed(1)}%`;
        document.getElementById('cpu-details').textContent = 
            `${metrics.cpu.cores} —è–¥–µ—Ä | Load: ${metrics.cpu.load1.toFixed(2)}`;

        // –û–±–Ω–æ–≤–ª—è–µ–º Memory —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const memUsedGB = metrics.memory.used / 1024 / 1024 / 1024;
        const memTotalGB = metrics.memory.total / 1024 / 1024 / 1024;
        document.getElementById('memory-usage').textContent = `${metrics.memory.usage.toFixed(1)}%`;
        document.getElementById('memory-details').textContent = 
            `${memUsedGB.toFixed(2)}GB / ${memTotalGB.toFixed(2)}GB`;

        // –û–±–Ω–æ–≤–ª—è–µ–º Disk
        const diskUsedGB = metrics.disk.used / 1024 / 1024 / 1024;
        const diskTotalGB = metrics.disk.total / 1024 / 1024 / 1024;
        document.getElementById('disk-usage').textContent = `${metrics.disk.usage.toFixed(1)}%`;
        document.getElementById('disk-details').textContent = 
            `${diskUsedGB.toFixed(1)}GB / ${diskTotalGB.toFixed(1)}GB`;

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (this.reconnectAttempts === 0) {
            console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ WebSocket:', metrics.system);
        }
    }

    updateLastUpdateTime() {
        const now = new Date();
        document.getElementById('lastUpdate').textContent = now.toLocaleTimeString();
    }

    updateStatus(status, message) {
        const statusElement = document.getElementById('status');
        statusElement.textContent = message;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª–∞—Å—Å—ã
        statusElement.className = 'status-value';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å
        if (status === 'connected') {
            statusElement.style.color = '#4CAF50';
        } else if (status === 'error' || status === 'disconnected') {
            statusElement.style.color = '#f44336';
        } else if (status === 'connecting' || status === 'reconnecting') {
            statusElement.style.color = '#ff9800';
        } else {
            statusElement.style.color = '#2196F3';
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
    sendMessage(message) {
        if (this.ws && this.isConnected) {
            this.ws.send(JSON.stringify(message));
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    disconnect() {
        if (this.ws) {
            this.ws.close();
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–≥–¥–∞ DOM –∑–∞–≥—Ä—É–∂–µ–Ω
document.addEventListener('DOMContentLoaded', () => {
    window.monitor = new SysPulseMonitor();
});

// –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (window.monitor) {
        window.monitor.disconnect();
    }
});